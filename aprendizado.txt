Dia 1
{
    CRIAR VARIÁVEIS DENTRO DO ROOT COM{
        :root {
            --variavei-nome: valor;
        }
    }
    E UTILIZA-LAS COMO VALORES NO CSS COM{
        seletor{
            propriedade: var(--variavel-nome);
        }
    }

    UTILIZAR O TRANSFORM: TRANSLATEX() PARA CENTRALIZAR O PRÓPRIO ELEMENTO DENTRO DE UMA CAIXA, INDEPENDENTE DA SUA LARGURA.{
        left: 50%;
        transform: translateX(-50%);
        PS:MUITO ÚTIL NOS CASOS DE POSITION ABSOLUTE E FIXED
    }

    UTILIZAR O 'BACKGROUND-POSITION' PARA POSICIONAR UMA IMAGEM DE FUNDO{
        background-position: eixoX eixoY;
        OU palavras chaves como
        background-position: center/left top/right bottom;
    }

    UTILIZAR MEDIAQUERIES E BREAKPOINTS PARA DESIGNS RESPONSIVOS
    @media(condição){
        seletores{
            propriedades: valores;
        }
    }

    PSEUDOELEMENTOS são elementos não existentes no html, mas que podemos criar através do CSS com o ::{
        elemento::after{
            content: "conteúdo"; 
            etc...
        }
    }
}

Dia 2
{
    CRIAR CÓDIGOS SEMÂNTICOS DENTRO DE UM FORM, COM AS TAGS FIELDSET E LEGEND
    
    ALGUNS USOS DO EMMET NO VISUAL CODE, PARA AUTOPREENCHER ALGUNS CÓDIGOS, COMO:
        usar o '*n' com o emmet pra criar 'n' elementos:
        {
            div*2
        }

        usar o 'tag1+tag2' criar 2 ou mais tags seguidas:
        {
            label+input   
        }
        usar o 'tag1>tag2' para criar tags dentro de outras
        {
            a>span
        }

        USAR O CONSOLE DO NAVEGADOR E SELECIONAR OS "OBJETOS" DA PÁGINA, PRA SABER QUAL A MESMA SE REFERENCIA, POR EX: DOCUMENT, QUERYSELECTOR, ETC
            no console:
                document.querySelector("body")
            E ver no html toda tag sendo selecionada

    PODEMOS USAR APIS PARA RECEBER INFORMAÇÕES NO FORMATO JSON, E
    COMO UTILIZAR O CONCEITO DE PROMISSES > THEN

}

Dia 3
{
    CTRL + D 1x para selecionar uma palavra inteira, e CTRL + D novamente para escolher prox referência selecionada

    COMO USAR GRID:
    GRID FUNCIONA COMO FLEX, ONDE ELE TORNA SEUS ELEMENTOS FILHOS COMO UM FLEX, PORÉM PODENDO SEPARAR INTERNAMENTE, COMO ELES SERÃO SEPARADOS (COM AS COLUNAS E LINHAS), ASSIM PODENDO DEFINIR QUANTIDADE DESEJADA, E TAMANHOS FIXOS OU FRACIONADOS/FLEXIVEIS (USANDO O 'FR')
    grid-template-columns: 1fr 2fr 1fr; 

    PODEMOS TAMBÉM DEFINIR ESPAÇAMENTO APENAS ENTRE OS ELEMENTOS DENTRO DO GRID, SEM ALTERNAR MARGENS EXTERNAS:
    GAP: 16px;

    USAR CSS PARA REMOVER EVENTO DE CLICKS DE ALGUNS ELEMENTOS:
    seletor{
        pointer-event: none;
    }

    USAR 'DATA' NO HTML E VER O VALOR NO JS:
    {
        <div data-id = "1" ></div>
        console.log(document.querySelector("div").dataset.id);
    }

    USAR A PROPRIEDADE 'classlist' DE UM ELEMENTO, E CHAMAR A FUNCAO TOGGLE, QUE ADICIONARA OU REMOVERA UMA CLASSE:
        elemento.classList.toggle("classe");


    MÉTODO filter() DE UM ARRAY, ONDE ELE VARRE UM ARRAY USANDO ALGUMA CONDIÇÃO PASSADA EM UMA FUNÇÃO ANÔNIMA, E CASO RETORNE TRUE, ELE PASSA O VALOR PARA OUTRO ARRAY, CASO FALSE, ELE EXCLUI:
        arrayFiltrado = array.filter( ( ) => { 'Lógica que retorna true ou false' } )

    PESQUISAR UM VALOR DENTRO DE UM ARRAY E RETORNAR O ÍNDICE:
        array.findIndex( ( ) => { 'Lógica que retorna true ou false' } )

    PODEMOS USAR ALPHA NO HEXADECIMAL TAMBÉM, BASTA ACRESCENTAR 2 VALORES NO FINAL (INDO DE 0 A F):
        background-color: #ffffff55;

    SHIFT + CLICK NA SETINHA QUE ESCONDE UM BLOCO DE CÓDIGO, ESCONDERÁ APENAS OS BLOCO DE CÓDIGOS NETOS. TESTE ABAIXO:
        pai{
            filho1{
                neto 1
                neto 2
            }
            filho 2{
                neto 3
                neto 4
            }
        }

    PODEMOS SELECIONAR UM ELEMENTO, DAR CTRL + F (para pesquisa-lo em todo arquivo), clicar na seta e dar replace all

    PODEMOS CRIAR UM PSEUDO-ELEMENTO COM PURO CSS, SEM PRECISAR CRIAR NADA NO HTML, PRA CRIAR COMO EXEMPLO, ALGUMA FAIXA DE PLANO DE FUNDO:
    body::after {
        content: "";
        position: fixed;
        bottom: 0;
        top: 260px;
        left: 0;
        right: 0;
        background: #fff;
        z-index: -1;
    }

    PODEMOS USAR O VALOR 'COVER' DA PROPRIEDADE 'OBJECT-FIT' PARA AO INVES DE DISTORCER IMAGENS QUE NÃO CAIBAM EM UM ELEMENTO, SIMPLESMENTE CENTRALIZA-LA E ESCONDER/CORTAR TODO EXCESSO, REMOVENDO PROBLEMAS DE DISTORÇÃO DE IMAGENS, OU DE QUEBRA DE LAYOUT CASO IMAGENS DE DIFERENTES TAMANHO APAREÇAM:
        object-fit: cover;
}

Dia 4 
{
    USAR NODE
    INSTALAR O NODE E VERIFICAR VERSAO COM:
        node -v

    INICIAR UM PROJETO NODE COM:
        npm init -y

    E ALTERAR O PACKAGE.JSON NA DESC 'MAIN' PARA O SCRIPT PRINCIPAL DO PROJETO

    INSTALAR O EXPRESS:
        npm install express

    PS: nao eh recomendavel, enviar node_modules no github... adicionar ao git ignore?

    npm start

    Instalar template engine "nunjucks"
        npm install nunjucks

    instalar nunjucks template (Usado p/ colorir sintaxe do nunjucks no html e alguns 'alias' de auto-complete). 
    Após a instalação, basta adicionar/remover configuração padrão do vscode para alguns 'bugs' no vscode
    CTRL + SHIFT + P > Pesquisar por json settings e abrir > :
    
    "files.associations": {
        "*.html" : "njk"
    },
    "emmet.includeLanguages": {
        "njk": "html"
    },
    "material-icon-theme.files.associations": {
        // "*.html": "nunjucks"
        "*.html": "html"
    }

    extends do nunjucks funciona da seguinte maneira:
    A partir do momento que usamos o extends, tudo que estiver na página extendida será recuperado, e tudo que estiver na página carregada no browser (página da url) deverá estar dentro de blocks, caso contrário, será excluido.
    PS: Os blocks devem estar presentes nas 2 páginas, (explicar melhor)!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

}
